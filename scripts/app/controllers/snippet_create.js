// Generated by CoffeeScript 1.4.0
(function() {
  var SnippetCreate,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  SnippetCreate = (function(_super) {

    __extends(SnippetCreate, _super);

    SnippetCreate.prototype.tag = 'div';

    SnippetCreate.prototype.className = 'snippet-create';

    SnippetCreate.prototype.view = 'snippet_create.view';

    SnippetCreate.prototype.elements = {
      '.snippet-name input': 'snippetName',
      '.snippet-code textarea': 'snippetCode',
      '.snippet-description input': 'snippetDescription',
      '.snippet-list .list': 'snippetList'
    };

    SnippetCreate.prototype.events = {
      'click [action="add-snippet"]': 'create',
      'click [action="reset-snippet"]': 'reset',
      'click [action="snippet-list"]': 'goSnippetList'
    };

    function SnippetCreate() {
      SnippetCreate.__super__.constructor.apply(this, arguments);
      this.el.append(this.render(this.loadView()));
      this.refreshElements();
    }

    SnippetCreate.prototype.loadView = function() {
      return this.xhr({
        url: "scripts/app/views/" + this.view,
        async: false
      });
    };

    SnippetCreate.prototype.render = function(tpl) {
      return tpl;
    };

    SnippetCreate.prototype.create = function() {
      var now;
      console.log('create');
      now = new Date();
      Snippet.create({
        name: this.snippetName.val(),
        code: this.snippetCode.val(),
        description: this.snippetDescription.val(),
        annotation: 'first line',
        timestamp: now.getTime()
      });
      return this.navigate('/list');
    };

    SnippetCreate.prototype.reset = function() {
      this.snippetName.val('');
      this.snippetCode.val('');
      return this.snippetDescription.val('');
    };

    SnippetCreate.prototype.goSnippetList = function() {
      return this.navigate('/list');
    };

    return SnippetCreate;

  })(Spine.Controller);

  this.SnippetCreate = SnippetCreate;

}).call(this);
