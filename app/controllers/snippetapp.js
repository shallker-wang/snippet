// Generated by CoffeeScript 1.4.0
(function() {
  var SnippetApp,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  SnippetApp = (function(_super) {

    __extends(SnippetApp, _super);

    SnippetApp.prototype.elements = {
      '.snippet-name input': 'snippetName',
      '.snippet-code textarea': 'snippetCode',
      '.snippet-description input': 'snippetDescription',
      '.snippet-list .list': 'snippetList'
    };

    SnippetApp.prototype.events = {
      'click #action-add-snippet': 'create',
      'click #action-reset-snippet': 'reset',
      'click #action-del-all': 'deleteAll'
    };

    function SnippetApp() {
      this.appendAll = __bind(this.appendAll, this);

      this.appendOne = __bind(this.appendOne, this);

      this.create = __bind(this.create, this);
      SnippetApp.__super__.constructor.apply(this, arguments);
      Snippet.bind("create", this.appendOne);
      Snippet.bind("refresh", this.appendAll);
      Snippet.fetch();
      this.log('SnippetApp_controller init');
    }

    SnippetApp.prototype.create = function() {
      var now;
      now = new Date();
      Snippet.create({
        name: this.snippetName.val(),
        code: this.snippetCode.val(),
        description: this.snippetDescription.val(),
        timestamp: now.getTime()
      });
      return this.reset();
    };

    SnippetApp.prototype.appendOne = function(snippet) {
      var SnippetOne;
      SnippetOne = new Snippets({
        item: snippet
      });
      return this.snippetList.append(SnippetOne.el);
    };

    SnippetApp.prototype.appendAll = function() {
      return Snippet.each(this.appendOne);
    };

    SnippetApp.prototype.refreshList = function() {
      var options, snippetList, values;
      this.log('refreshList');
      options = {
        item: '<li><a class="name"></a></li>'
      };
      values = [
        {
          name: 'python'
        }, {
          name: 'ruby'
        }
      ];
      return snippetList = new List('snippet-list', options, values);
    };

    SnippetApp.prototype.reset = function() {
      this.log(Snippet.first().toString());
      this.snippetName.val('');
      this.snippetCode.val('');
      return this.snippetDescription.val('');
    };

    SnippetApp.prototype.deleteAll = function() {
      var _this = this;
      Snippet.each(function(item) {
        return item.destroy();
      });
      return this.snippetList.empty();
    };

    return SnippetApp;

  })(Spine.Controller);

  $(function() {
    return new SnippetApp({
      el: $("#tasks")
    });
  });

}).call(this);
